// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  KYLE-PC
// DateTime: 9/2/2013 3:07:52 PM
// UserName: Kyle
// Input file <ParserGenerator.y - 9/2/2013 3:07:49 PM>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

internal enum Tokens {error=94,EOF=95,NUMBER=96,
    STRING=97,GREATER=98,GREATEREQ=99,EQUAL=100,LESS=101,LESSEQ=102,
    AND=103,OR=104,WHILE=105,PIECE=106,START=107,END=108,
    THIS=109,IF=110,ELSE=111,BOARD=112,EOT=113,WIN=114,
    DIRECTION=115,X=116,Y=117,REPLACE=118,TYPE=119,HASMOVED=120,
    PIECEDEF=121};

internal struct ValueType
#line 18 "ParserGenerator.y"
{ public string sVal; 
#line 19 "ParserGenerator.y"
		 public Stmt stmtVal; 
#line 20 "ParserGenerator.y"
		 public Piece pVal;
#line 21 "ParserGenerator.y"
		 public Pieces psVal;
#line 22 "ParserGenerator.y"
		 public PieceDef pdVal;
#line 23 "ParserGenerator.y"
		 public ImportedFile ifVal;
#line 24 "ParserGenerator.y"
		 public Win wVal;
#line 25 "ParserGenerator.y"
		 public Eot eVal;
#line 26 "ParserGenerator.y"
		 public Move mVal;
#line 27 "ParserGenerator.y"
         public int iVal; }
internal class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ParserGenerator.y - 9/2/2013 3:07:49 PM
#line 2 "ParserGenerator.y"
    Dictionary nt = new Dictionary<string,int>();
  // End verbatim content from ParserGenerator.y - 9/2/2013 3:07:49 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[51];
  private static State[] states = new State[139];
  private static string[] nonTerms = new string[] {
      "file", "element", "expr", "term", "fact", "strcmp", "while", "if", "assign", 
      "piece", "stmt", "stmtlist", "piecedef", "move", "eot", "win", "$accept", 
      "pieces", "startingposlist", "startingpos", };

  static Parser() {
    states[0] = new State(new int[]{121,131},new int[]{-1,1,-18,3,-13,138});
    states[1] = new State(new int[]{95,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{58,4});
    states[4] = new State(new int[]{96,120,121,131},new int[]{-19,5,-13,128,-20,130});
    states[5] = new State(new int[]{58,6,96,120},new int[]{-20,119});
    states[6] = new State(new int[]{113,115},new int[]{-15,7});
    states[7] = new State(new int[]{58,8});
    states[8] = new State(new int[]{114,11},new int[]{-16,9});
    states[9] = new State(new int[]{58,10});
    states[10] = new State(-2);
    states[11] = new State(new int[]{58,12});
    states[12] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-12,13,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[13] = new State(new int[]{58,14});
    states[14] = new State(-11);
    states[15] = new State(new int[]{105,18,110,26,97,38,112,64,109,76,58,-19,108,-19,111,-19},new int[]{-12,16,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[16] = new State(-18);
    states[17] = new State(-20);
    states[18] = new State(new int[]{40,19});
    states[19] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,20,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[20] = new State(new int[]{41,21,104,41,103,50,98,71,101,78,100,80,99,82,102,84});
    states[21] = new State(new int[]{107,22});
    states[22] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-12,23,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[23] = new State(new int[]{108,24});
    states[24] = new State(-14);
    states[25] = new State(-21);
    states[26] = new State(new int[]{40,27});
    states[27] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,28,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[28] = new State(new int[]{41,29,104,41,103,50,98,71,101,78,100,80,99,82,102,84});
    states[29] = new State(new int[]{107,30});
    states[30] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-12,31,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[31] = new State(new int[]{108,32,111,33});
    states[32] = new State(-16);
    states[33] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-12,34,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[34] = new State(new int[]{108,35});
    states[35] = new State(-17);
    states[36] = new State(new int[]{59,37});
    states[37] = new State(-22);
    states[38] = new State(new int[]{61,39});
    states[39] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,40,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[40] = new State(new int[]{104,41,103,50,98,71,101,78,100,80,99,82,102,84,59,-15});
    states[41] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,42,-4,73,-5,77,-10,58});
    states[42] = new State(new int[]{43,43,45,52,41,-24,104,-24,103,-24,98,-24,101,-24,100,-24,99,-24,102,-24,59,-24,93,-24});
    states[43] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-4,44,-5,77,-10,58});
    states[44] = new State(new int[]{42,45,47,54,37,74,43,-33,45,-33,41,-33,104,-33,103,-33,98,-33,101,-33,100,-33,99,-33,102,-33,59,-33,93,-33});
    states[45] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-5,46,-10,58});
    states[46] = new State(-36);
    states[47] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,48,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[48] = new State(new int[]{41,49,104,41,103,50,98,71,101,78,100,80,99,82,102,84});
    states[49] = new State(-40);
    states[50] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,51,-4,73,-5,77,-10,58});
    states[51] = new State(new int[]{43,43,45,52,41,-25,104,-25,103,-25,98,-25,101,-25,100,-25,99,-25,102,-25,59,-25,93,-25});
    states[52] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-4,53,-5,77,-10,58});
    states[53] = new State(new int[]{42,45,47,54,37,74,43,-34,45,-34,41,-34,104,-34,103,-34,98,-34,101,-34,100,-34,99,-34,102,-34,59,-34,93,-34});
    states[54] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-5,55,-10,58});
    states[55] = new State(-37);
    states[56] = new State(-41);
    states[57] = new State(-42);
    states[58] = new State(new int[]{46,59});
    states[59] = new State(new int[]{116,60,117,61,115,62,120,63});
    states[60] = new State(-43);
    states[61] = new State(-44);
    states[62] = new State(-45);
    states[63] = new State(-46);
    states[64] = new State(new int[]{91,65});
    states[65] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,66,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[66] = new State(new int[]{93,67,104,41,103,50,98,71,101,78,100,80,99,82,102,84});
    states[67] = new State(new int[]{91,68});
    states[68] = new State(new int[]{40,47,97,56,96,57,112,64,109,76,34,98},new int[]{-3,69,-2,86,-4,73,-5,77,-10,87,-6,97});
    states[69] = new State(new int[]{93,70,104,41,103,50,98,71,101,78,100,80,99,82,102,84});
    states[70] = new State(-12);
    states[71] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,72,-4,73,-5,77,-10,58});
    states[72] = new State(new int[]{43,43,45,52,41,-26,104,-26,103,-26,98,-26,101,-26,100,-26,99,-26,102,-26,59,-26,93,-26});
    states[73] = new State(new int[]{42,45,47,54,37,74,43,-35,45,-35,41,-35,104,-35,103,-35,98,-35,101,-35,100,-35,99,-35,102,-35,59,-35,93,-35});
    states[74] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-5,75,-10,58});
    states[75] = new State(-38);
    states[76] = new State(-13);
    states[77] = new State(-39);
    states[78] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,79,-4,73,-5,77,-10,58});
    states[79] = new State(new int[]{43,43,45,52,41,-27,104,-27,103,-27,98,-27,101,-27,100,-27,99,-27,102,-27,59,-27,93,-27});
    states[80] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,81,-4,73,-5,77,-10,58});
    states[81] = new State(new int[]{43,43,45,52,41,-28,104,-28,103,-28,98,-28,101,-28,100,-28,99,-28,102,-28,59,-28,93,-28});
    states[82] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,83,-4,73,-5,77,-10,58});
    states[83] = new State(new int[]{43,43,45,52,41,-29,104,-29,103,-29,98,-29,101,-29,100,-29,99,-29,102,-29,59,-29,93,-29});
    states[84] = new State(new int[]{40,47,97,56,96,57,112,64,109,76},new int[]{-2,85,-4,73,-5,77,-10,58});
    states[85] = new State(new int[]{43,43,45,52,41,-30,104,-30,103,-30,98,-30,101,-30,100,-30,99,-30,102,-30,59,-30,93,-30});
    states[86] = new State(new int[]{43,43,45,52,41,-31,104,-31,103,-31,98,-31,101,-31,100,-31,99,-31,102,-31,59,-31,93,-31});
    states[87] = new State(new int[]{46,88});
    states[88] = new State(new int[]{116,60,117,61,115,62,120,63,119,89});
    states[89] = new State(new int[]{100,90});
    states[90] = new State(new int[]{34,94,112,64,109,76},new int[]{-10,91});
    states[91] = new State(new int[]{46,92});
    states[92] = new State(new int[]{119,93});
    states[93] = new State(-47);
    states[94] = new State(new int[]{97,95});
    states[95] = new State(new int[]{34,96});
    states[96] = new State(-48);
    states[97] = new State(-32);
    states[98] = new State(new int[]{97,99});
    states[99] = new State(new int[]{34,100});
    states[100] = new State(new int[]{100,101});
    states[101] = new State(new int[]{34,105,112,64,109,76},new int[]{-10,102});
    states[102] = new State(new int[]{46,103});
    states[103] = new State(new int[]{119,104});
    states[104] = new State(-49);
    states[105] = new State(new int[]{97,106});
    states[106] = new State(new int[]{34,107});
    states[107] = new State(-50);
    states[108] = new State(new int[]{46,109});
    states[109] = new State(new int[]{118,110});
    states[110] = new State(new int[]{40,111});
    states[111] = new State(new int[]{97,112});
    states[112] = new State(new int[]{41,113});
    states[113] = new State(new int[]{59,114});
    states[114] = new State(-23);
    states[115] = new State(new int[]{58,116});
    states[116] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-12,117,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[117] = new State(new int[]{58,118});
    states[118] = new State(-10);
    states[119] = new State(-4);
    states[120] = new State(new int[]{58,121});
    states[121] = new State(new int[]{96,122});
    states[122] = new State(new int[]{58,123});
    states[123] = new State(new int[]{97,124});
    states[124] = new State(new int[]{58,125});
    states[125] = new State(new int[]{96,126});
    states[126] = new State(new int[]{58,127});
    states[127] = new State(-5);
    states[128] = new State(new int[]{58,129});
    states[129] = new State(-7);
    states[130] = new State(-3);
    states[131] = new State(new int[]{58,132});
    states[132] = new State(new int[]{97,133});
    states[133] = new State(new int[]{58,134});
    states[134] = new State(new int[]{105,18,110,26,97,38,112,64,109,76},new int[]{-14,135,-12,137,-11,15,-7,17,-8,25,-9,36,-10,108});
    states[135] = new State(new int[]{58,136});
    states[136] = new State(-8);
    states[137] = new State(-9);
    states[138] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-17, new int[]{-1,95});
    rules[2] = new Rule(-1, new int[]{-18,58,-19,58,-15,58,-16,58});
    rules[3] = new Rule(-19, new int[]{-20});
    rules[4] = new Rule(-19, new int[]{-19,-20});
    rules[5] = new Rule(-20, new int[]{96,58,96,58,97,58,96,58});
    rules[6] = new Rule(-18, new int[]{-13});
    rules[7] = new Rule(-18, new int[]{-18,58,-13,58});
    rules[8] = new Rule(-13, new int[]{121,58,97,58,-14,58});
    rules[9] = new Rule(-14, new int[]{-12});
    rules[10] = new Rule(-15, new int[]{113,58,-12,58});
    rules[11] = new Rule(-16, new int[]{114,58,-12,58});
    rules[12] = new Rule(-10, new int[]{112,91,-3,93,91,-3,93});
    rules[13] = new Rule(-10, new int[]{109});
    rules[14] = new Rule(-7, new int[]{105,40,-3,41,107,-12,108});
    rules[15] = new Rule(-9, new int[]{97,61,-3});
    rules[16] = new Rule(-8, new int[]{110,40,-3,41,107,-12,108});
    rules[17] = new Rule(-8, new int[]{110,40,-3,41,107,-12,111,-12,108});
    rules[18] = new Rule(-12, new int[]{-11,-12});
    rules[19] = new Rule(-12, new int[]{-11});
    rules[20] = new Rule(-11, new int[]{-7});
    rules[21] = new Rule(-11, new int[]{-8});
    rules[22] = new Rule(-11, new int[]{-9,59});
    rules[23] = new Rule(-11, new int[]{-10,46,118,40,97,41,59});
    rules[24] = new Rule(-3, new int[]{-3,104,-2});
    rules[25] = new Rule(-3, new int[]{-3,103,-2});
    rules[26] = new Rule(-3, new int[]{-3,98,-2});
    rules[27] = new Rule(-3, new int[]{-3,101,-2});
    rules[28] = new Rule(-3, new int[]{-3,100,-2});
    rules[29] = new Rule(-3, new int[]{-3,99,-2});
    rules[30] = new Rule(-3, new int[]{-3,102,-2});
    rules[31] = new Rule(-3, new int[]{-2});
    rules[32] = new Rule(-3, new int[]{-6});
    rules[33] = new Rule(-2, new int[]{-2,43,-4});
    rules[34] = new Rule(-2, new int[]{-2,45,-4});
    rules[35] = new Rule(-2, new int[]{-4});
    rules[36] = new Rule(-4, new int[]{-4,42,-5});
    rules[37] = new Rule(-4, new int[]{-4,47,-5});
    rules[38] = new Rule(-4, new int[]{-4,37,-5});
    rules[39] = new Rule(-4, new int[]{-5});
    rules[40] = new Rule(-5, new int[]{40,-3,41});
    rules[41] = new Rule(-5, new int[]{97});
    rules[42] = new Rule(-5, new int[]{96});
    rules[43] = new Rule(-5, new int[]{-10,46,116});
    rules[44] = new Rule(-5, new int[]{-10,46,117});
    rules[45] = new Rule(-5, new int[]{-10,46,115});
    rules[46] = new Rule(-5, new int[]{-10,46,120});
    rules[47] = new Rule(-6, new int[]{-10,46,119,100,-10,46,119});
    rules[48] = new Rule(-6, new int[]{-10,46,119,100,34,97,34});
    rules[49] = new Rule(-6, new int[]{34,97,34,100,-10,46,119});
    rules[50] = new Rule(-6, new int[]{34,97,34,100,34,97,34});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // file -> pieces, ':', startingposlist, ':', eot, ':', win, ':'
#line 80 "ParserGenerator.y"
{
#line 81 "ParserGenerator.y"
					CurrentSemanticValue.ifVal=new ImportedFile(ValueStack[ValueStack.Depth-8],ValueStack[ValueStack.Depth-6],ValueStack[ValueStack.Depth-4].eVal,ValueStack[ValueStack.Depth-2].wVal);
#line 82 "ParserGenerator.y"
				}
        break;
      case 3: // startingposlist -> startingpos
#line 85 "ParserGenerator.y"
{
#line 86 "ParserGenerator.y"
					StartingPosList spl=new StartingPosList();
#line 87 "ParserGenerator.y"
					spl.add(ValueStack[ValueStack.Depth-1]);
#line 88 "ParserGenerator.y"
					CurrentSemanticValue=spl;
#line 89 "ParserGenerator.y"
				}
        break;
      case 4: // startingposlist -> startingposlist, startingpos
#line 91 "ParserGenerator.y"
{
#line 92 "ParserGenerator.y"
					ValueStack[ValueStack.Depth-2].add(ValueStack[ValueStack.Depth-1]);
#line 93 "ParserGenerator.y"
					CurrentSemanticValue=ValueStack[ValueStack.Depth-2];
#line 94 "ParserGenerator.y"
				}
        break;
      case 5: // startingpos -> NUMBER, ':', NUMBER, ':', STRING, ':', NUMBER, ':'
#line 97 "ParserGenerator.y"
{
#line 98 "ParserGenerator.y"
					CurrentSemanticValue=new StartingPos(ValueStack[ValueStack.Depth-8].iVal,ValueStack[ValueStack.Depth-6].iVal,ValueStack[ValueStack.Depth-4].sVal,ValueStack[ValueStack.Depth-2].iVal);
#line 99 "ParserGenerator.y"
				}
        break;
      case 6: // pieces -> piecedef
#line 102 "ParserGenerator.y"
{
#line 103 "ParserGenerator.y"
					Pieces p = new Pieces();
#line 104 "ParserGenerator.y"
					p.add(ValueStack[ValueStack.Depth-1].pdVal);
#line 105 "ParserGenerator.y"
					CurrentSemanticValue=p;
#line 106 "ParserGenerator.y"
				}
        break;
      case 7: // pieces -> pieces, ':', piecedef, ':'
#line 108 "ParserGenerator.y"
{
#line 109 "ParserGenerator.y"
					ValueStack[ValueStack.Depth-4].add(ValueStack[ValueStack.Depth-2].pdVal);
#line 110 "ParserGenerator.y"
					CurrentSemanticValue=ValueStack[ValueStack.Depth-4];
#line 111 "ParserGenerator.y"
				}
        break;
      case 8: // piecedef -> PIECEDEF, ':', STRING, ':', move, ':'
#line 114 "ParserGenerator.y"
{
#line 115 "ParserGenerator.y"
					CurrentSemanticValue.pdVal=new PieceDef(ValueStack[ValueStack.Depth-4].sVal,ValueStack[ValueStack.Depth-2].mVal);
#line 116 "ParserGenerator.y"
				}
        break;
      case 9: // move -> stmtlist
#line 119 "ParserGenerator.y"
{
#line 120 "ParserGenerator.y"
					CurrentSemanticValue.mVal=new Move(ValueStack[ValueStack.Depth-1].stmtlistVal);
#line 121 "ParserGenerator.y"
				}
        break;
      case 10: // eot -> EOT, ':', stmtlist, ':'
#line 124 "ParserGenerator.y"
{
#line 125 "ParserGenerator.y"
					CurrentSemanticValue.eVal=new Eot(ValueStack[ValueStack.Depth-2].stmtlistVal);
#line 126 "ParserGenerator.y"
				}
        break;
      case 11: // win -> WIN, ':', stmtlist, ':'
#line 129 "ParserGenerator.y"
{
#line 130 "ParserGenerator.y"
					CurrentSemanticValue.wVal=new Win(ValueStack[ValueStack.Depth-2].stmtlistVal);
#line 131 "ParserGenerator.y"
				}
        break;
      case 12: // piece -> BOARD, '[', expr, ']', '[', expr, ']'
#line 134 "ParserGenerator.y"
{
#line 135 "ParserGenerator.y"
					CurrentSemanticValue.psVal=new BoardElement(ValueStack[ValueStack.Depth-5].Expr,ValueStack[ValueStack.Depth-2].Expr);
#line 136 "ParserGenerator.y"
				}
        break;
      case 13: // piece -> THIS
#line 138 "ParserGenerator.y"
{
#line 139 "ParserGenerator.y"
					CurrentSemanticValue.psVal=new This();
#line 140 "ParserGenerator.y"
				}
        break;
      case 14: // while -> WHILE, '(', expr, ')', START, stmtlist, END
#line 144 "ParserGenerator.y"
{
#line 145 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=new WhileStmt(ValueStack[ValueStack.Depth-5].Expr,ValueStack[ValueStack.Depth-2].stmtlistVal);
#line 146 "ParserGenerator.y"
				}
        break;
      case 15: // assign -> STRING, '=', expr
#line 149 "ParserGenerator.y"
{
#line 150 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=new AssignStmt(ValueStack[ValueStack.Depth-3].sVal,ValueStack[ValueStack.Depth-1].Expr);
#line 151 "ParserGenerator.y"
				}
        break;
      case 16: // if -> IF, '(', expr, ')', START, stmtlist, END
#line 154 "ParserGenerator.y"
{
#line 155 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=new IfStmt(ValueStack[ValueStack.Depth-5].Expr,ValueStack[ValueStack.Depth-2].stmtlistVal,new StmtList());
#line 156 "ParserGenerator.y"
				}
        break;
      case 17: // if -> IF, '(', expr, ')', START, stmtlist, ELSE, stmtlist, END
#line 159 "ParserGenerator.y"
{
#line 160 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=new IfStmt(ValueStack[ValueStack.Depth-7].Expr,ValueStack[ValueStack.Depth-4].stmtlistVal,ValueStack[ValueStack.Depth-2].stmtlistVal);
#line 161 "ParserGenerator.y"
				}
        break;
      case 18: // stmtlist -> stmt, stmtlist
#line 164 "ParserGenerator.y"
{
#line 165 "ParserGenerator.y"
					ValueStack[ValueStack.Depth-1].stmtlistVal.insert(ValueStack[ValueStack.Depth-2].stmtVal);
#line 166 "ParserGenerator.y"
					CurrentSemanticValue.stmtlistVal=ValueStack[ValueStack.Depth-1].stmtlistVal;
#line 167 "ParserGenerator.y"
				}
        break;
      case 19: // stmtlist -> stmt
#line 169 "ParserGenerator.y"
{
#line 170 "ParserGenerator.y"
					StmtList sl=new StmtList();
#line 171 "ParserGenerator.y"
					sl.insert(ValueStack[ValueStack.Depth-1].stmtVal);
#line 172 "ParserGenerator.y"
					CurrentSemanticValue.stmtlistVal=sl;
#line 173 "ParserGenerator.y"
				}
        break;
      case 20: // stmt -> while
#line 177 "ParserGenerator.y"
{
#line 178 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=ValueStack[ValueStack.Depth-1].stmtVal;
#line 179 "ParserGenerator.y"
				}
        break;
      case 21: // stmt -> if
#line 181 "ParserGenerator.y"
{
#line 182 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=ValueStack[ValueStack.Depth-1].stmtVal;
#line 183 "ParserGenerator.y"
				}
        break;
      case 22: // stmt -> assign, ';'
#line 185 "ParserGenerator.y"
{
#line 186 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=ValueStack[ValueStack.Depth-2].stmtVal;
#line 187 "ParserGenerator.y"
				}
        break;
      case 23: // stmt -> piece, '.', REPLACE, '(', STRING, ')', ';'
#line 189 "ParserGenerator.y"
{
#line 190 "ParserGenerator.y"
					CurrentSemanticValue.stmtVal=new ReplaceStmt(ValueStack[ValueStack.Depth-7].psVal,ValueStack[ValueStack.Depth-3].sVal);
#line 191 "ParserGenerator.y"
				}
        break;
      case 24: // expr -> expr, OR, element
#line 194 "ParserGenerator.y"
{
#line 195 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Or(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 196 "ParserGenerator.y"
			}
        break;
      case 25: // expr -> expr, AND, element
#line 198 "ParserGenerator.y"
{
#line 199 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new And(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 200 "ParserGenerator.y"
			}
        break;
      case 26: // expr -> expr, GREATER, element
#line 202 "ParserGenerator.y"
{
#line 203 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Greater(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 204 "ParserGenerator.y"
			}
        break;
      case 27: // expr -> expr, LESS, element
#line 206 "ParserGenerator.y"
{
#line 207 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Less(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 208 "ParserGenerator.y"
			}
        break;
      case 28: // expr -> expr, EQUAL, element
#line 210 "ParserGenerator.y"
{
#line 211 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Equ(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 212 "ParserGenerator.y"
			}
        break;
      case 29: // expr -> expr, GREATEREQ, element
#line 214 "ParserGenerator.y"
{
#line 215 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new GreaterEq(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 216 "ParserGenerator.y"
			}
        break;
      case 30: // expr -> expr, LESSEQ, element
#line 218 "ParserGenerator.y"
{
#line 219 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new LessEq(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 220 "ParserGenerator.y"
			}
        break;
      case 31: // expr -> element
#line 222 "ParserGenerator.y"
{
#line 223 "ParserGenerator.y"
				CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;
#line 224 "ParserGenerator.y"
			}
        break;
      case 32: // expr -> strcmp
#line 226 "ParserGenerator.y"
{
#line 227 "ParserGenerator.y"
				CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;
#line 228 "ParserGenerator.y"
			}
        break;
      case 33: // element -> element, '+', term
#line 231 "ParserGenerator.y"
{
#line 232 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Plus(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 233 "ParserGenerator.y"
			}
        break;
      case 34: // element -> element, '-', term
#line 236 "ParserGenerator.y"
{
#line 237 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Minus(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 238 "ParserGenerator.y"
			}
        break;
      case 35: // element -> term
#line 240 "ParserGenerator.y"
{
#line 241 "ParserGenerator.y"
				CurrentSemanticValue.Expr=ValueStack[ValueStack.Depth-1].Expr;
#line 242 "ParserGenerator.y"
			}
        break;
      case 36: // term -> term, '*', fact
#line 246 "ParserGenerator.y"
{
#line 247 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Times(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 248 "ParserGenerator.y"
			}
        break;
      case 37: // term -> term, '/', fact
#line 251 "ParserGenerator.y"
{
#line 252 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Divide(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 253 "ParserGenerator.y"
			}
        break;
      case 38: // term -> term, '%', fact
#line 256 "ParserGenerator.y"
{
#line 257 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Mod(ValueStack[ValueStack.Depth-3].Expr,ValueStack[ValueStack.Depth-1].Expr);
#line 258 "ParserGenerator.y"
			}
        break;
      case 39: // term -> fact
#line 261 "ParserGenerator.y"
{
#line 262 "ParserGenerator.y"
				CurrentSemanticValue.Expr=ValueStack[ValueStack.Depth-1].Expr;
#line 263 "ParserGenerator.y"
			}
        break;
      case 40: // fact -> '(', expr, ')'
#line 266 "ParserGenerator.y"
{
#line 267 "ParserGenerator.y"
				CurrentSemanticValue.Expr=ValueStack[ValueStack.Depth-2].Expr;
#line 268 "ParserGenerator.y"
			}
        break;
      case 41: // fact -> STRING
#line 271 "ParserGenerator.y"
{
#line 272 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Ident(ValueStack[ValueStack.Depth-1].sVal);
#line 273 "ParserGenerator.y"
			}
        break;
      case 42: // fact -> NUMBER
#line 276 "ParserGenerator.y"
{
#line 277 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Number(ValueStack[ValueStack.Depth-1].iVal);
#line 278 "ParserGenerator.y"
			}
        break;
      case 43: // fact -> piece, '.', X
#line 280 "ParserGenerator.y"
{
#line 281 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new XVal(ValueStack[ValueStack.Depth-3].psVal,ValueStack[ValueStack.Depth-1].sVal);
#line 282 "ParserGenerator.y"
			}
        break;
      case 44: // fact -> piece, '.', Y
#line 284 "ParserGenerator.y"
{
#line 285 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new YVal(ValueStack[ValueStack.Depth-3].psVal,ValueStack[ValueStack.Depth-1].sVal);
#line 286 "ParserGenerator.y"
			}
        break;
      case 45: // fact -> piece, '.', DIRECTION
#line 288 "ParserGenerator.y"
{
#line 289 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new Direction(ValueStack[ValueStack.Depth-3].psVal,ValueStack[ValueStack.Depth-1].sVal);
#line 290 "ParserGenerator.y"
			}
        break;
      case 46: // fact -> piece, '.', HASMOVED
#line 292 "ParserGenerator.y"
{
#line 293 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new HASMOVED(ValueStack[ValueStack.Depth-3].psVal);
#line 294 "ParserGenerator.y"
			}
        break;
      case 47: // strcmp -> piece, '.', TYPE, EQUAL, piece, '.', TYPE
#line 297 "ParserGenerator.y"
{
#line 298 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new StrCmp(new Type(ValueStack[ValueStack.Depth-7].psVal),new Type(ValueStack[ValueStack.Depth-3].psVal));
#line 299 "ParserGenerator.y"
			}
        break;
      case 48: // strcmp -> piece, '.', TYPE, EQUAL, '"', STRING, '"'
#line 301 "ParserGenerator.y"
{
#line 302 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new StrCmp(new Type(ValueStack[ValueStack.Depth-7].psVal),ValueStack[ValueStack.Depth-2].sVal);
#line 303 "ParserGenerator.y"
			}
        break;
      case 49: // strcmp -> '"', STRING, '"', EQUAL, piece, '.', TYPE
#line 305 "ParserGenerator.y"
{
#line 306 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new StrCmp(ValueStack[ValueStack.Depth-6].sVal,new Type(ValueStack[ValueStack.Depth-3].psVal));
#line 307 "ParserGenerator.y"
			}
        break;
      case 50: // strcmp -> '"', STRING, '"', EQUAL, '"', STRING, '"'
#line 309 "ParserGenerator.y"
{
#line 310 "ParserGenerator.y"
				CurrentSemanticValue.Expr=new StrCmp(ValueStack[ValueStack.Depth-6].sVal,ValueStack[ValueStack.Depth-2].sVal);
#line 311 "ParserGenerator.y"
			}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 314 "ParserGenerator.y"

#line 315 "ParserGenerator.y"

#line 316 "ParserGenerator.y"
class ImportedFile
#line 317 "ParserGenerator.y"
{
#line 318 "ParserGenerator.y"
	public Pieces _p;
#line 319 "ParserGenerator.y"
	public StartingPos _sp;
#line 320 "ParserGenerator.y"
	public Eot _eot;
#line 321 "ParserGenerator.y"
	public Win _win;
#line 322 "ParserGenerator.y"
	public ImportedFile(Pieces p, StartingPos sp, Eot eot, Win win)
#line 323 "ParserGenerator.y"
	{
#line 324 "ParserGenerator.y"
		_p=p;
#line 325 "ParserGenerator.y"
		_sp=sp;
#line 326 "ParserGenerator.y"
		_eot=eot;
#line 327 "ParserGenerator.y"
		_win=win;
#line 328 "ParserGenerator.y"
	}
#line 329 "ParserGenerator.y"
	
#line 330 "ParserGenerator.y"
}
#line 331 "ParserGenerator.y"
class StartingPosList
#line 332 "ParserGenerator.y"
{
#line 333 "ParserGenerator.y"
	List<StartingPos> _pos;
#line 334 "ParserGenerator.y"
	
#line 335 "ParserGenerator.y"
	public StartingPosList()
#line 336 "ParserGenerator.y"
	{
#line 337 "ParserGenerator.y"
		_pos=new List<StartingPos>();
#line 338 "ParserGenerator.y"
	}
#line 339 "ParserGenerator.y"
	
#line 340 "ParserGenerator.y"
	public void add(StartingPos s)
#line 341 "ParserGenerator.y"
	{
#line 342 "ParserGenerator.y"
		_pos.Add(s);
#line 343 "ParserGenerator.y"
	}
#line 344 "ParserGenerator.y"
	
#line 345 "ParserGenerator.y"
	public getPieces()
#line 346 "ParserGenerator.y"
	{
#line 347 "ParserGenerator.y"
		return _pos;
#line 348 "ParserGenerator.y"
	}
#line 349 "ParserGenerator.y"
	
#line 350 "ParserGenerator.y"
}
#line 351 "ParserGenerator.y"
class StartingPos
#line 352 "ParserGenerator.y"
{
#line 353 "ParserGenerator.y"
	public int _x;
#line 354 "ParserGenerator.y"
	public int _y;
#line 355 "ParserGenerator.y"
	public string _type;
#line 356 "ParserGenerator.y"
	public int _direction;
#line 357 "ParserGenerator.y"
	public starting(int x, int y, string type, int direction)
#line 358 "ParserGenerator.y"
	{
#line 359 "ParserGenerator.y"
		_x=x;
#line 360 "ParserGenerator.y"
		_y=y;
#line 361 "ParserGenerator.y"
		_type=type;
#line 362 "ParserGenerator.y"
		_direction=direction;
#line 363 "ParserGenerator.y"
	}
#line 364 "ParserGenerator.y"
}
#line 365 "ParserGenerator.y"
class Pieces
#line 366 "ParserGenerator.y"
{
#line 367 "ParserGenerator.y"
	List<subPiece> _pieces;
#line 368 "ParserGenerator.y"
	
#line 369 "ParserGenerator.y"
	public Pieces()
#line 370 "ParserGenerator.y"
	{
#line 371 "ParserGenerator.y"
		_pieces=new List<subPiece>();
#line 372 "ParserGenerator.y"
	}
#line 373 "ParserGenerator.y"
	
#line 374 "ParserGenerator.y"
	public void add(subPiece s)
#line 375 "ParserGenerator.y"
	{
#line 376 "ParserGenerator.y"
		_pieces.Add(s);
#line 377 "ParserGenerator.y"
	}
#line 378 "ParserGenerator.y"
	
#line 379 "ParserGenerator.y"
	public getPieces()
#line 380 "ParserGenerator.y"
	{
#line 381 "ParserGenerator.y"
		return _pieces;
#line 382 "ParserGenerator.y"
	}
#line 383 "ParserGenerator.y"
	
#line 384 "ParserGenerator.y"
}
#line 385 "ParserGenerator.y"

#line 386 "ParserGenerator.y"
class subPiece 
#line 387 "ParserGenerator.y"
{
#line 388 "ParserGenerator.y"
	string _type;
#line 389 "ParserGenerator.y"
	Move _move;
#line 390 "ParserGenerator.y"
	public subPieces(string type, Move move)
#line 391 "ParserGenerator.y"
	{
#line 392 "ParserGenerator.y"
		_type=type;
#line 393 "ParserGenerator.y"
		_move=move;
#line 394 "ParserGenerator.y"
	}
#line 395 "ParserGenerator.y"
	public getType()
#line 396 "ParserGenerator.y"
	{
#line 397 "ParserGenerator.y"
		return _type;
#line 398 "ParserGenerator.y"
	}
#line 399 "ParserGenerator.y"
	public getMove()
#line 400 "ParserGenerator.y"
	{
#line 401 "ParserGenerator.y"
		return _move;
#line 402 "ParserGenerator.y"
	}
#line 403 "ParserGenerator.y"
}
#line 404 "ParserGenerator.y"

#line 405 "ParserGenerator.y"
class Eot
#line 406 "ParserGenerator.y"
{
#line 407 "ParserGenerator.y"
	StmtList _sl;
#line 408 "ParserGenerator.y"
	
#line 409 "ParserGenerator.y"
	public Eot(StmtList sl)
#line 410 "ParserGenerator.y"
	{
#line 411 "ParserGenerator.y"
		_sl=sl;
#line 412 "ParserGenerator.y"
	}
#line 413 "ParserGenerator.y"
	public bool eval(Board board,Dictionary nt)
#line 414 "ParserGenerator.y"
	{
#line 415 "ParserGenerator.y"
		sl.eval(board,nt);
#line 416 "ParserGenerator.y"
		if(nt.Containskey("return") && nt["return"]==1){
#line 417 "ParserGenerator.y"
			return true;
#line 418 "ParserGenerator.y"
		}
#line 419 "ParserGenerator.y"
		return false;
#line 420 "ParserGenerator.y"
	}
#line 421 "ParserGenerator.y"
}
#line 422 "ParserGenerator.y"

#line 423 "ParserGenerator.y"
class Move
#line 424 "ParserGenerator.y"
{
#line 425 "ParserGenerator.y"
	StmtList _sl;
#line 426 "ParserGenerator.y"
	
#line 427 "ParserGenerator.y"
	public Move(StmtList sl)
#line 428 "ParserGenerator.y"
	{
#line 429 "ParserGenerator.y"
		_sl=sl;
#line 430 "ParserGenerator.y"
	}
#line 431 "ParserGenerator.y"
	public bool eval(Board board,Dictionary nt,Piece t,int x, int y)
#line 432 "ParserGenerator.y"
	{
#line 433 "ParserGenerator.y"
		nt["movex"]=x;
#line 434 "ParserGenerator.y"
		nt["movey"]=y;
#line 435 "ParserGenerator.y"
		sl.eval(board,nt,t);
#line 436 "ParserGenerator.y"
		if(nt.Containskey("return") && nt["return"]==1){
#line 437 "ParserGenerator.y"
			return true;
#line 438 "ParserGenerator.y"
		}
#line 439 "ParserGenerator.y"
		return false;
#line 440 "ParserGenerator.y"
	}
#line 441 "ParserGenerator.y"
}
#line 442 "ParserGenerator.y"

#line 443 "ParserGenerator.y"
class Win
#line 444 "ParserGenerator.y"
{
#line 445 "ParserGenerator.y"
	StmtList _sl;
#line 446 "ParserGenerator.y"
	
#line 447 "ParserGenerator.y"
	public Win(StmtList sl)
#line 448 "ParserGenerator.y"
	{
#line 449 "ParserGenerator.y"
		_sl=sl;
#line 450 "ParserGenerator.y"
	}
#line 451 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt)
#line 452 "ParserGenerator.y"
	{
#line 453 "ParserGenerator.y"
		sl.eval(board,nt);
#line 454 "ParserGenerator.y"
		if(nt.Containskey("winner")){
#line 455 "ParserGenerator.y"
			return nt["winner"];
#line 456 "ParserGenerator.y"
		}
#line 457 "ParserGenerator.y"
		return 0;
#line 458 "ParserGenerator.y"
	}
#line 459 "ParserGenerator.y"
}
#line 460 "ParserGenerator.y"

#line 461 "ParserGenerator.y"
abstract class Expr
#line 462 "ParserGenerator.y"
{
#line 463 "ParserGenerator.y"
	abstract public int eval(Board board,Dictionary nt,Piece t);
#line 464 "ParserGenerator.y"
}
#line 465 "ParserGenerator.y"

#line 466 "ParserGenerator.y"
class Equ : Expr
#line 467 "ParserGenerator.y"
{
#line 468 "ParserGenerator.y"
	Expr _lhs;
#line 469 "ParserGenerator.y"
	Expr _rhs;
#line 470 "ParserGenerator.y"
	public Equ(Expr lhs, Expr rhs)
#line 471 "ParserGenerator.y"
	{
#line 472 "ParserGenerator.y"
		_lhs=lhs;
#line 473 "ParserGenerator.y"
		_rhs=rhs;
#line 474 "ParserGenerator.y"
	}
#line 475 "ParserGenerator.y"
	
#line 476 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 477 "ParserGenerator.y"
	{
#line 478 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) == _rhs.eval(nt,board,t))
#line 479 "ParserGenerator.y"
		{
#line 480 "ParserGenerator.y"
			return 1;
#line 481 "ParserGenerator.y"
		}
#line 482 "ParserGenerator.y"
		return 0;
#line 483 "ParserGenerator.y"
	}
#line 484 "ParserGenerator.y"
}
#line 485 "ParserGenerator.y"

#line 486 "ParserGenerator.y"
class Greater : Expr
#line 487 "ParserGenerator.y"
{
#line 488 "ParserGenerator.y"
	Expr _lhs;
#line 489 "ParserGenerator.y"
	Expr _rhs;
#line 490 "ParserGenerator.y"
	public Greater(Expr lhs, Expr rhs)
#line 491 "ParserGenerator.y"
	{
#line 492 "ParserGenerator.y"
		_lhs=lhs;
#line 493 "ParserGenerator.y"
		_rhs=rhs;
#line 494 "ParserGenerator.y"
	}
#line 495 "ParserGenerator.y"
	
#line 496 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 497 "ParserGenerator.y"
	{
#line 498 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) > _rhs.eval(nt,board,t))
#line 499 "ParserGenerator.y"
		{
#line 500 "ParserGenerator.y"
			return 1;
#line 501 "ParserGenerator.y"
		}
#line 502 "ParserGenerator.y"
		return 0;
#line 503 "ParserGenerator.y"
	}
#line 504 "ParserGenerator.y"
}
#line 505 "ParserGenerator.y"

#line 506 "ParserGenerator.y"
class GreaterEq : Expr
#line 507 "ParserGenerator.y"
{
#line 508 "ParserGenerator.y"
	Expr _lhs;
#line 509 "ParserGenerator.y"
	Expr _rhs;
#line 510 "ParserGenerator.y"
	public GreaterEq(Expr lhs, Expr rhs)
#line 511 "ParserGenerator.y"
	{
#line 512 "ParserGenerator.y"
		_lhs=lhs;
#line 513 "ParserGenerator.y"
		_rhs=rhs;
#line 514 "ParserGenerator.y"
	}
#line 515 "ParserGenerator.y"
	
#line 516 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 517 "ParserGenerator.y"
	{
#line 518 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) >= _rhs.eval(nt,board,t))
#line 519 "ParserGenerator.y"
		{
#line 520 "ParserGenerator.y"
			return 1;
#line 521 "ParserGenerator.y"
		}
#line 522 "ParserGenerator.y"
		return 0;
#line 523 "ParserGenerator.y"
	}
#line 524 "ParserGenerator.y"
}
#line 525 "ParserGenerator.y"
class Less : Expr
#line 526 "ParserGenerator.y"
{
#line 527 "ParserGenerator.y"
	Expr _lhs;
#line 528 "ParserGenerator.y"
	Expr _rhs;
#line 529 "ParserGenerator.y"
	public Less(Expr lhs, Expr rhs)
#line 530 "ParserGenerator.y"
	{
#line 531 "ParserGenerator.y"
		_lhs=lhs;
#line 532 "ParserGenerator.y"
		_rhs=rhs;
#line 533 "ParserGenerator.y"
	}
#line 534 "ParserGenerator.y"
	
#line 535 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 536 "ParserGenerator.y"
	{
#line 537 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) < _rhs.eval(nt,board,t))
#line 538 "ParserGenerator.y"
		{
#line 539 "ParserGenerator.y"
			return 1;
#line 540 "ParserGenerator.y"
		}
#line 541 "ParserGenerator.y"
		return 0;
#line 542 "ParserGenerator.y"
	}
#line 543 "ParserGenerator.y"
}
#line 544 "ParserGenerator.y"

#line 545 "ParserGenerator.y"
class LessEq : Expr
#line 546 "ParserGenerator.y"
{
#line 547 "ParserGenerator.y"
	Expr _lhs;
#line 548 "ParserGenerator.y"
	Expr _rhs;
#line 549 "ParserGenerator.y"
	public LessEq(Expr lhs, Expr rhs)
#line 550 "ParserGenerator.y"
	{
#line 551 "ParserGenerator.y"
		_lhs=lhs;
#line 552 "ParserGenerator.y"
		_rhs=rhs;
#line 553 "ParserGenerator.y"
	}
#line 554 "ParserGenerator.y"
	
#line 555 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 556 "ParserGenerator.y"
	{
#line 557 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) <= _rhs.eval(nt,board,t))
#line 558 "ParserGenerator.y"
		{
#line 559 "ParserGenerator.y"
			return 1;
#line 560 "ParserGenerator.y"
		}
#line 561 "ParserGenerator.y"
		return 0;
#line 562 "ParserGenerator.y"
	}
#line 563 "ParserGenerator.y"
}
#line 564 "ParserGenerator.y"

#line 565 "ParserGenerator.y"
class Or : Expr
#line 566 "ParserGenerator.y"
{
#line 567 "ParserGenerator.y"
	Expr _lhs;
#line 568 "ParserGenerator.y"
	Expr _rhs;
#line 569 "ParserGenerator.y"
	public Or(Expr lhs, Expr rhs)
#line 570 "ParserGenerator.y"
	{
#line 571 "ParserGenerator.y"
		_lhs=lhs;
#line 572 "ParserGenerator.y"
		_rhs=rhs;
#line 573 "ParserGenerator.y"
	}
#line 574 "ParserGenerator.y"
	
#line 575 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 576 "ParserGenerator.y"
	{
#line 577 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) >0 || _rhs.eval(nt,board,t)>0)
#line 578 "ParserGenerator.y"
		{
#line 579 "ParserGenerator.y"
			return 1;
#line 580 "ParserGenerator.y"
		}
#line 581 "ParserGenerator.y"
		return 0;
#line 582 "ParserGenerator.y"
	}
#line 583 "ParserGenerator.y"
}
#line 584 "ParserGenerator.y"

#line 585 "ParserGenerator.y"
class And : Expr
#line 586 "ParserGenerator.y"
{
#line 587 "ParserGenerator.y"
	Expr _lhs;
#line 588 "ParserGenerator.y"
	Expr _rhs;
#line 589 "ParserGenerator.y"
	public And(Expr lhs, Expr rhs)
#line 590 "ParserGenerator.y"
	{
#line 591 "ParserGenerator.y"
		_lhs=lhs;
#line 592 "ParserGenerator.y"
		_rhs=rhs;
#line 593 "ParserGenerator.y"
	}
#line 594 "ParserGenerator.y"
	
#line 595 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 596 "ParserGenerator.y"
	{
#line 597 "ParserGenerator.y"
		if(_lhs.eval(nt,board,t) >0 && _rhs.eval(nt,board,t)>0)
#line 598 "ParserGenerator.y"
		{
#line 599 "ParserGenerator.y"
			return 1;
#line 600 "ParserGenerator.y"
		}
#line 601 "ParserGenerator.y"
		return 0;
#line 602 "ParserGenerator.y"
	}
#line 603 "ParserGenerator.y"
}
#line 604 "ParserGenerator.y"

#line 605 "ParserGenerator.y"
class Number : Expr
#line 606 "ParserGenerator.y"
{
#line 607 "ParserGenerator.y"
	int _value;
#line 608 "ParserGenerator.y"
	public Number(int value)
#line 609 "ParserGenerator.y"
	{
#line 610 "ParserGenerator.y"
		_value=value;
#line 611 "ParserGenerator.y"
	}
#line 612 "ParserGenerator.y"
	
#line 613 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 614 "ParserGenerator.y"
	{
#line 615 "ParserGenerator.y"
		return _value;
#line 616 "ParserGenerator.y"
	}
#line 617 "ParserGenerator.y"
}
#line 618 "ParserGenerator.y"

#line 619 "ParserGenerator.y"
class Ident : Expr
#line 620 "ParserGenerator.y"
{
#line 621 "ParserGenerator.y"
	int _name;
#line 622 "ParserGenerator.y"
	public Ident(string name)
#line 623 "ParserGenerator.y"
	{
#line 624 "ParserGenerator.y"
		_name=name;
#line 625 "ParserGenerator.y"
	}
#line 626 "ParserGenerator.y"
	
#line 627 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 628 "ParserGenerator.y"
	{
#line 629 "ParserGenerator.y"
		return nt[_name];
#line 630 "ParserGenerator.y"
	}
#line 631 "ParserGenerator.y"
}
#line 632 "ParserGenerator.y"

#line 633 "ParserGenerator.y"
class Times : Expr
#line 634 "ParserGenerator.y"
{
#line 635 "ParserGenerator.y"
	Expr _lhs;
#line 636 "ParserGenerator.y"
	Expr _rhs;
#line 637 "ParserGenerator.y"
	public Times(Expr lhs, Expr rhs)
#line 638 "ParserGenerator.y"
	{
#line 639 "ParserGenerator.y"
		_lhs=lhs;
#line 640 "ParserGenerator.y"
		_rhs=rhs;
#line 641 "ParserGenerator.y"
	}
#line 642 "ParserGenerator.y"
	
#line 643 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 644 "ParserGenerator.y"
	{
#line 645 "ParserGenerator.y"
		return _lhs.eval(nt,board,t) * _rhs.eval(nt,board,t);
#line 646 "ParserGenerator.y"
	}
#line 647 "ParserGenerator.y"
}
#line 648 "ParserGenerator.y"

#line 649 "ParserGenerator.y"
class Plus : Expr
#line 650 "ParserGenerator.y"
{
#line 651 "ParserGenerator.y"
	Expr _lhs;
#line 652 "ParserGenerator.y"
	Expr _rhs;
#line 653 "ParserGenerator.y"
	public Plus(Expr lhs, Expr rhs)
#line 654 "ParserGenerator.y"
	{
#line 655 "ParserGenerator.y"
		_lhs=lhs;
#line 656 "ParserGenerator.y"
		_rhs=rhs;
#line 657 "ParserGenerator.y"
	}
#line 658 "ParserGenerator.y"
	
#line 659 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 660 "ParserGenerator.y"
	{
#line 661 "ParserGenerator.y"
		return _lhs.eval(nt,board,t) + _rhs.eval(nt,board,t);
#line 662 "ParserGenerator.y"
	}
#line 663 "ParserGenerator.y"
}
#line 664 "ParserGenerator.y"

#line 665 "ParserGenerator.y"
class Minus : Expr
#line 666 "ParserGenerator.y"
{
#line 667 "ParserGenerator.y"
	Expr _lhs;
#line 668 "ParserGenerator.y"
	Expr _rhs;
#line 669 "ParserGenerator.y"
	public Minus(Expr lhs, Expr rhs)
#line 670 "ParserGenerator.y"
	{
#line 671 "ParserGenerator.y"
		_lhs=lhs;
#line 672 "ParserGenerator.y"
		_rhs=rhs;
#line 673 "ParserGenerator.y"
	}
#line 674 "ParserGenerator.y"
	
#line 675 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 676 "ParserGenerator.y"
	{
#line 677 "ParserGenerator.y"
		return _lhs.eval(nt,board,t) - _rhs.eval(nt,board,t);
#line 678 "ParserGenerator.y"
	}
#line 679 "ParserGenerator.y"
}
#line 680 "ParserGenerator.y"

#line 681 "ParserGenerator.y"
class Divide : Expr
#line 682 "ParserGenerator.y"
{
#line 683 "ParserGenerator.y"
	Expr _lhs;
#line 684 "ParserGenerator.y"
	Expr _rhs;
#line 685 "ParserGenerator.y"
	public Divide(Expr lhs, Expr rhs)
#line 686 "ParserGenerator.y"
	{
#line 687 "ParserGenerator.y"
		_lhs=lhs;
#line 688 "ParserGenerator.y"
		_rhs=rhs;
#line 689 "ParserGenerator.y"
	}
#line 690 "ParserGenerator.y"
	
#line 691 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 692 "ParserGenerator.y"
	{
#line 693 "ParserGenerator.y"
		return (int)(_lhs.eval(nt,board,t) / _rhs.eval(nt,board,t));
#line 694 "ParserGenerator.y"
	}
#line 695 "ParserGenerator.y"
}
#line 696 "ParserGenerator.y"

#line 697 "ParserGenerator.y"
class Mod : Expr
#line 698 "ParserGenerator.y"
{
#line 699 "ParserGenerator.y"
	Expr _lhs;
#line 700 "ParserGenerator.y"
	Expr _rhs;
#line 701 "ParserGenerator.y"
	public Mod(Expr lhs, Expr rhs)
#line 702 "ParserGenerator.y"
	{
#line 703 "ParserGenerator.y"
		_lhs=lhs;
#line 704 "ParserGenerator.y"
		_rhs=rhs;
#line 705 "ParserGenerator.y"
	}
#line 706 "ParserGenerator.y"
	
#line 707 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 708 "ParserGenerator.y"
	{
#line 709 "ParserGenerator.y"
		return (int)(_lhs.eval(nt,board,t) % _rhs.eval(nt,board,t));
#line 710 "ParserGenerator.y"
	}
#line 711 "ParserGenerator.y"
}
#line 712 "ParserGenerator.y"

#line 713 "ParserGenerator.y"
abstract class Stmt
#line 714 "ParserGenerator.y"
{
#line 715 "ParserGenerator.y"
	abstract public void eval(Board board,Dictionary nt,Piece t);
#line 716 "ParserGenerator.y"
}
#line 717 "ParserGenerator.y"

#line 718 "ParserGenerator.y"
class AssignStmt : Stmt
#line 719 "ParserGenerator.y"
{
#line 720 "ParserGenerator.y"
	string _name;
#line 721 "ParserGenerator.y"
	Expr _rhs;
#line 722 "ParserGenerator.y"
	public AssignStmt(string name, Expr rhs)
#line 723 "ParserGenerator.y"
	{
#line 724 "ParserGenerator.y"
		_name=name;
#line 725 "ParserGenerator.y"
		_rhs=rhs;
#line 726 "ParserGenerator.y"
	}
#line 727 "ParserGenerator.y"
	
#line 728 "ParserGenerator.y"
	public void eval(Board board,Dictionary nt,Piece t)
#line 729 "ParserGenerator.y"
	{
#line 730 "ParserGenerator.y"
		nt[_name]=_rhs.eval(nt,board,t);
#line 731 "ParserGenerator.y"
	}
#line 732 "ParserGenerator.y"
}
#line 733 "ParserGenerator.y"

#line 734 "ParserGenerator.y"
class IfStmt : Stmt
#line 735 "ParserGenerator.y"
{
#line 736 "ParserGenerator.y"
	Expr _cond;
#line 737 "ParserGenerator.y"
	StmtList _tBody;
#line 738 "ParserGenerator.y"
	StmtList _fBody;
#line 739 "ParserGenerator.y"
	public IfStmt(Expr cond, StmtList tBody, StmtList fBody)
#line 740 "ParserGenerator.y"
	{
#line 741 "ParserGenerator.y"
		_cond=cond;
#line 742 "ParserGenerator.y"
		_tBody=tBody;
#line 743 "ParserGenerator.y"
		_fBody=fBody;
#line 744 "ParserGenerator.y"
	}
#line 745 "ParserGenerator.y"
	
#line 746 "ParserGenerator.y"
	public void eval(Board board,Dictionary nt,Piece t)
#line 747 "ParserGenerator.y"
	{
#line 748 "ParserGenerator.y"
		if(_cond.eval(nt,board,t)>0)
#line 749 "ParserGenerator.y"
		{
#line 750 "ParserGenerator.y"
			_tBody.eval(nt,board,t);
#line 751 "ParserGenerator.y"
		}
#line 752 "ParserGenerator.y"
		else
#line 753 "ParserGenerator.y"
		{
#line 754 "ParserGenerator.y"
			_fBody.eval(nt,board,t);
#line 755 "ParserGenerator.y"
		}
#line 756 "ParserGenerator.y"
	}
#line 757 "ParserGenerator.y"
}
#line 758 "ParserGenerator.y"

#line 759 "ParserGenerator.y"
class ReplaceStmt : Stmt
#line 760 "ParserGenerator.y"
{
#line 761 "ParserGenerator.y"
	Piece _p;
#line 762 "ParserGenerator.y"
	string _str;
#line 763 "ParserGenerator.y"
	public ReplaceStmt(Piece p,string str)
#line 764 "ParserGenerator.y"
	{
#line 765 "ParserGenerator.y"
		_p=p;
#line 766 "ParserGenerator.y"
		_str=str;
#line 767 "ParserGenerator.y"
	}
#line 768 "ParserGenerator.y"
	
#line 769 "ParserGenerator.y"
	public void eval(Board board,Dictionary nt,Piece t)
#line 770 "ParserGenerator.y"
	{
#line 771 "ParserGenerator.y"
		p.Replace(_str);
#line 772 "ParserGenerator.y"
	}
#line 773 "ParserGenerator.y"
}
#line 774 "ParserGenerator.y"

#line 775 "ParserGenerator.y"
class WhileStmt : Stmt
#line 776 "ParserGenerator.y"
{
#line 777 "ParserGenerator.y"
	Expr _cond;
#line 778 "ParserGenerator.y"
	StmtList _body;
#line 779 "ParserGenerator.y"
	
#line 780 "ParserGenerator.y"
	public IfStmt(Expr cond, StmtList body)
#line 781 "ParserGenerator.y"
	{
#line 782 "ParserGenerator.y"
		_cond=cond;
#line 783 "ParserGenerator.y"
		_body=body;
#line 784 "ParserGenerator.y"
	}
#line 785 "ParserGenerator.y"
	
#line 786 "ParserGenerator.y"
	public void eval(Board board,Dictionary nt,Piece t)
#line 787 "ParserGenerator.y"
	{
#line 788 "ParserGenerator.y"
		while(_cond.eval(nt)>0)
#line 789 "ParserGenerator.y"
		{
#line 790 "ParserGenerator.y"
			body.eval(nt,board,t);
#line 791 "ParserGenerator.y"
		}
#line 792 "ParserGenerator.y"
	}
#line 793 "ParserGenerator.y"
}
#line 794 "ParserGenerator.y"

#line 795 "ParserGenerator.y"
class StmtList
#line 796 "ParserGenerator.y"
{
#line 797 "ParserGenerator.y"
	List<Stmt> _stmts;
#line 798 "ParserGenerator.y"
	
#line 799 "ParserGenerator.y"
	public StmtList()
#line 800 "ParserGenerator.y"
	{
#line 801 "ParserGenerator.y"
		_stmts=new List<Stmt>();
#line 802 "ParserGenerator.y"
	}
#line 803 "ParserGenerator.y"
	
#line 804 "ParserGenerator.y"
	public void insert(Stmt s)
#line 805 "ParserGenerator.y"
	{
#line 806 "ParserGenerator.y"
		_stmts.Add(s);
#line 807 "ParserGenerator.y"
	}
#line 808 "ParserGenerator.y"
	
#line 809 "ParserGenerator.y"
	public void eval(Board board,Dictionary nt,Piece t)
#line 810 "ParserGenerator.y"
	{
#line 811 "ParserGenerator.y"
		foreach (Stmt s in _stmts)
#line 812 "ParserGenerator.y"
		{
#line 813 "ParserGenerator.y"
			s.eval(nt,board,t);
#line 814 "ParserGenerator.y"
		}
#line 815 "ParserGenerator.y"
	}
#line 816 "ParserGenerator.y"
}
#line 817 "ParserGenerator.y"

#line 818 "ParserGenerator.y"
class This
#line 819 "ParserGenerator.y"
{	
#line 820 "ParserGenerator.y"
	public This()
#line 821 "ParserGenerator.y"
	{
#line 822 "ParserGenerator.y"
	}
#line 823 "ParserGenerator.y"
	
#line 824 "ParserGenerator.y"
	public Piece eval(Board board,Dictionary nt,Piece t)
#line 825 "ParserGenerator.y"
	{
#line 826 "ParserGenerator.y"
		return t;
#line 827 "ParserGenerator.y"
	}
#line 828 "ParserGenerator.y"
}
#line 829 "ParserGenerator.y"

#line 830 "ParserGenerator.y"
class BoardElement
#line 831 "ParserGenerator.y"
{	
#line 832 "ParserGenerator.y"
	Expr _x;
#line 833 "ParserGenerator.y"
	Expr _y;
#line 834 "ParserGenerator.y"
	
#line 835 "ParserGenerator.y"
	public BoardElement(Expr x,Expr y)
#line 836 "ParserGenerator.y"
	{
#line 837 "ParserGenerator.y"
		_x=x;
#line 838 "ParserGenerator.y"
		_y=y;
#line 839 "ParserGenerator.y"
	}
#line 840 "ParserGenerator.y"
	
#line 841 "ParserGenerator.y"
	public Piece eval(Board board,Dictionary nt,Piece t)
#line 842 "ParserGenerator.y"
	{
#line 843 "ParserGenerator.y"
		return board[_x.eval(board,nt,t)][_y.eval(board,nt,t)].piece;
#line 844 "ParserGenerator.y"
	}
#line 845 "ParserGenerator.y"
}
#line 846 "ParserGenerator.y"

#line 847 "ParserGenerator.y"
class XVal : Expr
#line 848 "ParserGenerator.y"
{
#line 849 "ParserGenerator.y"
	Piece _p;
#line 850 "ParserGenerator.y"
	public XVal(Piece p)
#line 851 "ParserGenerator.y"
	{
#line 852 "ParserGenerator.y"
		_p=p;
#line 853 "ParserGenerator.y"
	}
#line 854 "ParserGenerator.y"
	
#line 855 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 856 "ParserGenerator.y"
	{
#line 857 "ParserGenerator.y"
		if(_p==null)
#line 858 "ParserGenerator.y"
			return -1;
#line 859 "ParserGenerator.y"
		return _p.GetX();
#line 860 "ParserGenerator.y"
	}
#line 861 "ParserGenerator.y"
}
#line 862 "ParserGenerator.y"
class YVal : Expr
#line 863 "ParserGenerator.y"
{
#line 864 "ParserGenerator.y"
	Piece _p;
#line 865 "ParserGenerator.y"
	public YVal(Piece p)
#line 866 "ParserGenerator.y"
	{
#line 867 "ParserGenerator.y"
		_p=p;
#line 868 "ParserGenerator.y"
	}
#line 869 "ParserGenerator.y"
	
#line 870 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 871 "ParserGenerator.y"
	{
#line 872 "ParserGenerator.y"
		if(_p==null)
#line 873 "ParserGenerator.y"
			return -1;
#line 874 "ParserGenerator.y"
		return _p.GetY();
#line 875 "ParserGenerator.y"
	}
#line 876 "ParserGenerator.y"
}
#line 877 "ParserGenerator.y"

#line 878 "ParserGenerator.y"
class Direction : Expr
#line 879 "ParserGenerator.y"
{
#line 880 "ParserGenerator.y"
	Piece _p;
#line 881 "ParserGenerator.y"
	public Direction(Piece p)
#line 882 "ParserGenerator.y"
	{
#line 883 "ParserGenerator.y"
		_p=p;
#line 884 "ParserGenerator.y"
	}
#line 885 "ParserGenerator.y"
	
#line 886 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 887 "ParserGenerator.y"
	{
#line 888 "ParserGenerator.y"
		if(_p==null)
#line 889 "ParserGenerator.y"
			return -1;
#line 890 "ParserGenerator.y"
		return _p.direction;
#line 891 "ParserGenerator.y"
	}
#line 892 "ParserGenerator.y"
}
#line 893 "ParserGenerator.y"

#line 894 "ParserGenerator.y"
class Type
#line 895 "ParserGenerator.y"
{
#line 896 "ParserGenerator.y"
	Piece _p;
#line 897 "ParserGenerator.y"
	public Type(Piece p)
#line 898 "ParserGenerator.y"
	{
#line 899 "ParserGenerator.y"
		_p=p;
#line 900 "ParserGenerator.y"
	}
#line 901 "ParserGenerator.y"
	
#line 902 "ParserGenerator.y"
	public string eval(Board board,Dictionary nt,Piece t)
#line 903 "ParserGenerator.y"
	{
#line 904 "ParserGenerator.y"
		if(_p==null)
#line 905 "ParserGenerator.y"
			return "";
#line 906 "ParserGenerator.y"
		return _p.type;
#line 907 "ParserGenerator.y"
	}
#line 908 "ParserGenerator.y"
}
#line 909 "ParserGenerator.y"

#line 910 "ParserGenerator.y"
class HasMoved
#line 911 "ParserGenerator.y"
{
#line 912 "ParserGenerator.y"
	Piece _p;
#line 913 "ParserGenerator.y"
	public HasMoved(Piece p)
#line 914 "ParserGenerator.y"
	{
#line 915 "ParserGenerator.y"
		_p=p;
#line 916 "ParserGenerator.y"
	}
#line 917 "ParserGenerator.y"
	
#line 918 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 919 "ParserGenerator.y"
	{
#line 920 "ParserGenerator.y"
		if(_p==null)
#line 921 "ParserGenerator.y"
			return -1;
#line 922 "ParserGenerator.y"
		if(_p.hasMoved)
#line 923 "ParserGenerator.y"
			return 1;
#line 924 "ParserGenerator.y"
		return 0;
#line 925 "ParserGenerator.y"
	}
#line 926 "ParserGenerator.y"
}
#line 927 "ParserGenerator.y"

#line 928 "ParserGenerator.y"
class StrCmp:Expr
#line 929 "ParserGenerator.y"
{
#line 930 "ParserGenerator.y"
	Piece _p=null;
#line 931 "ParserGenerator.y"
	Piece _p2=null;
#line 932 "ParserGenerator.y"
	string s=null;
#line 933 "ParserGenerator.y"
	string s2=null;
#line 934 "ParserGenerator.y"
	public StrCmp(Piece p,Piece p2)
#line 935 "ParserGenerator.y"
	{
#line 936 "ParserGenerator.y"
		_p=p;
#line 937 "ParserGenerator.y"
		_p2=p2;
#line 938 "ParserGenerator.y"
	}
#line 939 "ParserGenerator.y"
	public StrCmp(Piece p,string s)
#line 940 "ParserGenerator.y"
	{
#line 941 "ParserGenerator.y"
		_p=p;
#line 942 "ParserGenerator.y"
		_s=s;
#line 943 "ParserGenerator.y"
	}
#line 944 "ParserGenerator.y"
	public StrCmp(string s,Piece p)
#line 945 "ParserGenerator.y"
	{
#line 946 "ParserGenerator.y"
		_p=p;
#line 947 "ParserGenerator.y"
		_s=s;
#line 948 "ParserGenerator.y"
	}
#line 949 "ParserGenerator.y"
	public StrCmp(string s,string s2)
#line 950 "ParserGenerator.y"
	{
#line 951 "ParserGenerator.y"
		_s=s;
#line 952 "ParserGenerator.y"
		_s2=s2;
#line 953 "ParserGenerator.y"
	}
#line 954 "ParserGenerator.y"
	
#line 955 "ParserGenerator.y"
	public int eval(Board board,Dictionary nt,Piece t)
#line 956 "ParserGenerator.y"
	{
#line 957 "ParserGenerator.y"
		if(p!=null && p2!=null && p.type==p2.type)
#line 958 "ParserGenerator.y"
			return 1;
#line 959 "ParserGenerator.y"
		if(p!=null && s!=null && p.type==s)
#line 960 "ParserGenerator.y"
			return 1;
#line 961 "ParserGenerator.y"
		if(s!=null && s2!=null && s==s2)
#line 962 "ParserGenerator.y"
			return 1;
#line 963 "ParserGenerator.y"
		return 0;
#line 964 "ParserGenerator.y"
	}
#line 965 "ParserGenerator.y"
}
#line 966 "ParserGenerator.y"
/* 
#line 967 "ParserGenerator.y"
 * GPPG does not create a default parser constructor
#line 968 "ParserGenerator.y"
 * Most applications will have a parser type with other
#line 969 "ParserGenerator.y"
 * fields such as error handlers etc.  Here is a minimal
#line 970 "ParserGenerator.y"
 * version that just adds the default scanner object.
#line 971 "ParserGenerator.y"
 */
#line 972 "ParserGenerator.y"
Parser(Lexer s) : base(s) { }
#line 973 "ParserGenerator.y"

#line 974 "ParserGenerator.y"
static void Main(string[] args)
#line 975 "ParserGenerator.y"
{    
#line 976 "ParserGenerator.y"
    System.IO.TextReader reader;
#line 977 "ParserGenerator.y"
    if (args.Length > 0)
#line 978 "ParserGenerator.y"
        reader = new System.IO.StreamReader(args[0]);
#line 979 "ParserGenerator.y"
    else
#line 980 "ParserGenerator.y"
        reader = System.Console.In;
#line 981 "ParserGenerator.y"
        
#line 982 "ParserGenerator.y"
    Parser parser = new Parser( new Lexer( reader ));
#line 983 "ParserGenerator.y"
    //parser.Trace = true;
#line 984 "ParserGenerator.y"
    
#line 985 "ParserGenerator.y"
    Console.WriteLine("RealCalc expression evaluator, type ^C to exit");
#line 986 "ParserGenerator.y"
    parser.Parse();
#line 987 "ParserGenerator.y"
}
#line 988 "ParserGenerator.y"

#line 989 "ParserGenerator.y"
/*
#line 990 "ParserGenerator.y"
 *  Version for real arithmetic.  YYSTYPE is ValueType.
#line 991 "ParserGenerator.y"
 */
#line 992 "ParserGenerator.y"
class Lexer: QUT.Gppg.AbstractScanner<ValueType, LexLocation>
#line 993 "ParserGenerator.y"
{
#line 994 "ParserGenerator.y"
     private System.IO.TextReader reader;
#line 995 "ParserGenerator.y"

#line 996 "ParserGenerator.y"
     public Lexer(System.IO.TextReader reader)
#line 997 "ParserGenerator.y"
     {
#line 998 "ParserGenerator.y"
         t.reader = reader;
#line 999 "ParserGenerator.y"
     }
#line 1000 "ParserGenerator.y"

#line 1001 "ParserGenerator.y"
     public override int yylex()
#line 1002 "ParserGenerator.y"
     {
#line 1003 "ParserGenerator.y"
         char ch;
#line 1004 "ParserGenerator.y"
         int ord = reader.Read();
#line 1005 "ParserGenerator.y"
         //
#line 1006 "ParserGenerator.y"
         // Must check for EOF
#line 1007 "ParserGenerator.y"
         //
#line 1008 "ParserGenerator.y"
         if (ord == -1)
#line 1009 "ParserGenerator.y"
             return (int)Tokens.EOF;
#line 1010 "ParserGenerator.y"
         else
#line 1011 "ParserGenerator.y"
             ch = (char)ord;
#line 1012 "ParserGenerator.y"

#line 1013 "ParserGenerator.y"
         //if (ch == '\n')
#line 1014 "ParserGenerator.y"
         //   return ch;
#line 1015 "ParserGenerator.y"
         if (char.IsWhiteSpace(ch)||ch=='\n')
#line 1016 "ParserGenerator.y"
             return yylex();
#line 1017 "ParserGenerator.y"
         else if (char.IsDigit(ch))
#line 1018 "ParserGenerator.y"
         {
#line 1019 "ParserGenerator.y"
			 string num=ch.ToString();
#line 1020 "ParserGenerator.y"
			 while(char.IsDigit((char)reader.Peek()){
#line 1021 "ParserGenerator.y"
				num+=(char)reader.Read();
#line 1022 "ParserGenerator.y"
			 }
#line 1023 "ParserGenerator.y"
			 try{
#line 1024 "ParserGenerator.y"
				yylval.iVal=Convert.ToInt32(num);
#line 1025 "ParserGenerator.y"
			}
#line 1026 "ParserGenerator.y"
			catch (FormatException e)
#line 1027 "ParserGenerator.y"
			{
#line 1028 "ParserGenerator.y"
				Console.WriteLine("Invalid number");
#line 1029 "ParserGenerator.y"
				yylval.iVal=0;
#line 1030 "ParserGenerator.y"
			}
#line 1031 "ParserGenerator.y"
             return (int)Tokens.NUMBER;
#line 1032 "ParserGenerator.y"
         }
#line 1033 "ParserGenerator.y"
         else if ((ch >= 'a' && ch <= 'z') ||
#line 1034 "ParserGenerator.y"
                  (ch >= 'A' && ch <= 'Z'))
#line 1035 "ParserGenerator.y"
         {
#line 1036 "ParserGenerator.y"
			string s=ch.ToString();
#line 1037 "ParserGenerator.y"
			ch=(char)reader.Peek();
#line 1038 "ParserGenerator.y"
			while((ch >= 'a' && ch <= 'z') ||
#line 1039 "ParserGenerator.y"
                  (ch >= 'A' && ch <= 'Z')){
#line 1040 "ParserGenerator.y"
				s+=(char)reader.Read();
#line 1041 "ParserGenerator.y"
				ch=(char)reader.Peek();
#line 1042 "ParserGenerator.y"
			 }
#line 1043 "ParserGenerator.y"
            yylval.sVal = s;
#line 1044 "ParserGenerator.y"
			switch(s)
#line 1045 "ParserGenerator.y"
			{
#line 1046 "ParserGenerator.y"
				case "while":
#line 1047 "ParserGenerator.y"
					return (int)Tokens.WHILE;
#line 1048 "ParserGenerator.y"
				case "piece":
#line 1049 "ParserGenerator.y"
					return (int)Tokens.PIECE;
#line 1050 "ParserGenerator.y"
				case "start":
#line 1051 "ParserGenerator.y"
					return (int)Tokens.START;
#line 1052 "ParserGenerator.y"
				case "end":
#line 1053 "ParserGenerator.y"
					return (int)Tokens.END;
#line 1054 "ParserGenerator.y"
				case "this":
#line 1055 "ParserGenerator.y"
					return (int)Tokens.THIS;
#line 1056 "ParserGenerator.y"
				case "if":
#line 1057 "ParserGenerator.y"
					return (int)Tokens.IF;
#line 1058 "ParserGenerator.y"
				case "else":
#line 1059 "ParserGenerator.y"
					return (int)Tokens.ELSE;
#line 1060 "ParserGenerator.y"
				case "board":
#line 1061 "ParserGenerator.y"
					return (int)Tokens.BOARD;
#line 1062 "ParserGenerator.y"
				case "eot":
#line 1063 "ParserGenerator.y"
					return (int)Tokens.EOT;
#line 1064 "ParserGenerator.y"
				case "win":
#line 1065 "ParserGenerator.y"
					return (int)Tokens.WIN;
#line 1066 "ParserGenerator.y"
				case "direction":
#line 1067 "ParserGenerator.y"
					return (int)Tokens.DIRECTION;
#line 1068 "ParserGenerator.y"
				case "REPLACE":
#line 1069 "ParserGenerator.y"
					return (int)Tokens.REPLACE;
#line 1070 "ParserGenerator.y"
				case "X":
#line 1071 "ParserGenerator.y"
					return (int)Tokens.X;
#line 1072 "ParserGenerator.y"
				case "Y":
#line 1073 "ParserGenerator.y"
					return (int)Tokens.Y;
#line 1074 "ParserGenerator.y"
				case "type":
#line 1075 "ParserGenerator.y"
					return (int)Tokens.TYPE;
#line 1076 "ParserGenerator.y"
				case "hasMoved":
#line 1077 "ParserGenerator.y"
					return (int)Tokens.HASMOVED;
#line 1078 "ParserGenerator.y"
				case "eot":
#line 1079 "ParserGenerator.y"
					return (int)Tokens.EOT;
#line 1080 "ParserGenerator.y"
				case "win":
#line 1081 "ParserGenerator.y"
					return (int)Tokens.WIN;
#line 1082 "ParserGenerator.y"
				case "piecedef":
#line 1083 "ParserGenerator.y"
					return (int)Tokens.PIECEDEF;
#line 1084 "ParserGenerator.y"
				default:
#line 1085 "ParserGenerator.y"
					return (int)Tokens.STRING;
#line 1086 "ParserGenerator.y"
			}
#line 1087 "ParserGenerator.y"
         }
#line 1088 "ParserGenerator.y"
		 else if(ch == '>')
#line 1089 "ParserGenerator.y"
		 {
#line 1090 "ParserGenerator.y"
			if((char)reader.Peek()== '=')
#line 1091 "ParserGenerator.y"
			{
#line 1092 "ParserGenerator.y"
				reader.Read();
#line 1093 "ParserGenerator.y"
				yylval.sVal=">=";
#line 1094 "ParserGenerator.y"
				return (int) Tokens.GREATEREQ;
#line 1095 "ParserGenerator.y"
			}
#line 1096 "ParserGenerator.y"
			yylval.sVal=">";
#line 1097 "ParserGenerator.y"
			return (int) Tokens.GREATER;
#line 1098 "ParserGenerator.y"
		 }
#line 1099 "ParserGenerator.y"
		 else if(ch == '<')
#line 1100 "ParserGenerator.y"
		 {
#line 1101 "ParserGenerator.y"
			if((char)reader.Peek()== '=')
#line 1102 "ParserGenerator.y"
			{
#line 1103 "ParserGenerator.y"
				reader.Read();
#line 1104 "ParserGenerator.y"
				yylval.sVal="<=";
#line 1105 "ParserGenerator.y"
				return (int) Tokens.LESSEQ;
#line 1106 "ParserGenerator.y"
			}
#line 1107 "ParserGenerator.y"
			yylval.sVal="<";
#line 1108 "ParserGenerator.y"
			return (int) Tokens.LESS;
#line 1109 "ParserGenerator.y"
		 }
#line 1110 "ParserGenerator.y"
		 else if(ch == '=')
#line 1111 "ParserGenerator.y"
		 {
#line 1112 "ParserGenerator.y"
			if((char)reader.Peek()== '=')
#line 1113 "ParserGenerator.y"
			{
#line 1114 "ParserGenerator.y"
				reader.Read();
#line 1115 "ParserGenerator.y"
				yylval.sVal="==";
#line 1116 "ParserGenerator.y"
				return (int) Tokens.EQUAL;
#line 1117 "ParserGenerator.y"
			}
#line 1118 "ParserGenerator.y"
			return ch;
#line 1119 "ParserGenerator.y"
		 }
#line 1120 "ParserGenerator.y"
		 else if(ch == '&')
#line 1121 "ParserGenerator.y"
		 {
#line 1122 "ParserGenerator.y"
			if((char)reader.Peek()== '&')
#line 1123 "ParserGenerator.y"
			{
#line 1124 "ParserGenerator.y"
				reader.Read();
#line 1125 "ParserGenerator.y"
				yylval.sVal="&&";
#line 1126 "ParserGenerator.y"
				return (int) Tokens.AND;
#line 1127 "ParserGenerator.y"
			}
#line 1128 "ParserGenerator.y"
			return ch;
#line 1129 "ParserGenerator.y"
		 }
#line 1130 "ParserGenerator.y"
		 else if(ch == '|')
#line 1131 "ParserGenerator.y"
		 {
#line 1132 "ParserGenerator.y"
			if((char)reader.Peek()== '|')
#line 1133 "ParserGenerator.y"
			{
#line 1134 "ParserGenerator.y"
				reader.Read();
#line 1135 "ParserGenerator.y"
				yylval.sVal="||";
#line 1136 "ParserGenerator.y"
				return (int) Tokens.OR;
#line 1137 "ParserGenerator.y"
			}
#line 1138 "ParserGenerator.y"
			return ch;
#line 1139 "ParserGenerator.y"
		 }
#line 1140 "ParserGenerator.y"
         else
#line 1141 "ParserGenerator.y"
             switch (ch)
#line 1142 "ParserGenerator.y"
             {
#line 1143 "ParserGenerator.y"
                 case '.':
#line 1144 "ParserGenerator.y"
				 case ';':
#line 1145 "ParserGenerator.y"
				 case ':':
#line 1146 "ParserGenerator.y"
                 case '+':
#line 1147 "ParserGenerator.y"
                 case '-':
#line 1148 "ParserGenerator.y"
                 case '*':
#line 1149 "ParserGenerator.y"
                 case '/':
#line 1150 "ParserGenerator.y"
				 case '%':
#line 1151 "ParserGenerator.y"
				 case '[':
#line 1152 "ParserGenerator.y"
				 case ']':
#line 1153 "ParserGenerator.y"
				 case '\"':
#line 1154 "ParserGenerator.y"
                 case '(':
#line 1155 "ParserGenerator.y"
                 case ')':
#line 1156 "ParserGenerator.y"
                     return ch;
#line 1157 "ParserGenerator.y"
                 default:
#line 1158 "ParserGenerator.y"
                     Console.Error.WriteLine("Illegal character '{0}'", ch);
#line 1159 "ParserGenerator.y"
                     return yylex();
#line 1160 "ParserGenerator.y"
             }
#line 1161 "ParserGenerator.y"
     }
#line 1162 "ParserGenerator.y"

#line 1163 "ParserGenerator.y"
     public override void yyerror(string format, params object[] args)
#line 1164 "ParserGenerator.y"
     {
#line 1165 "ParserGenerator.y"
         Console.Error.WriteLine(format, args);
#line 1166 "ParserGenerator.y"
     }
#line 1167 "ParserGenerator.y"
}
}
